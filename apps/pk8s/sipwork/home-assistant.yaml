apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: influxdb-sipwork
  namespace: flux-system
spec:
  interval: 30m
  releaseName: influxdb-sipwork
  targetNamespace: sipwork
  serviceAccountName: helm-controller
  chart:
    spec:
      chart: influxdb
      version: 6.0.x
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
      interval: 12h
  valuesFrom:
    - kind: ConfigMap
      name: influxdb-sipwork-values
      valuesKey: values-influxdb.yaml
    - kind: Secret
      name: influxdb-sipwork-config
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: influxdb-cookie-path
  namespace: sipwork
spec:
  plugin:
    cookiePathPrefix:
      prefix: influxdb
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: influxdb
  namespace: sipwork
spec:
  stripPrefix:
    prefixes:
      - /influxdb
    forceSlash: true
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: influxdb-rewrite-body
  namespace: sipwork
spec:
  plugin:
    rewrite-body:
      lastModified: true
      rewrites:
        - regex: src="/
          replacement: src="/influxdb/
        - regex: href="/
          replacement: href="/influxdb/
        - regex: data-basepath="
          replacement: data-basepath="/influxdb/
        - regex: n.p="/"
          replacement: n.p="/influxdb/"
        - regex: o.p="/"
          replacement: o.p="/influxdb/"
        - regex: /api/
          replacement: /influxdb/api/
        - regex: api/v2/query
          replacement: influxdb/api/v2/query
        - regex: \)}/health`
          replacement: )}/influxdb/health`
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: home-assistant
  name: home-assistant
  namespace: sipwork
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: home-assistant
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: home-assistant
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "vlan-home",
              "namespace": "default",
              "mac": "a2:9a:66:e0:92:d0"
            }
          ]
    spec:
      containers:
        - env:
            - name: PGID
              value: '1000'
            - name: PUID
              value: '1000'
            - name: TZ
              value: Europe/Madrid
          image: lscr.io/linuxserver/homeassistant:2024.6.1 # {"$imagepolicy": "sipwork:home-assistant"}
          name: home-assistant
          ports:
            - containerPort: 8123
          resources: {}
          volumeMounts:
            - mountPath: /config
              name: home-assistant-config
      restartPolicy: Always
      volumes:
        - name: home-assistant-config
          persistentVolumeClaim:
            claimName: home-assistant-config
---
apiVersion: v1
kind: Service
metadata:
  name: homeassistant
  namespace: sipwork
  annotations:
    metallb.universe.tf/address-pool: internal-pool
    metallb.universe.tf/loadBalancerIPs: 192.168.4.248
spec:
  type: LoadBalancer
  ports:
    - port: 8123
      targetPort: 8123
      name: http
      protocol: TCP
  selector:
    io.kompose.service: home-assistant
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homeassistant
  namespace: sipwork
  annotations:
    traefik.ingress.kubernetes.io/router.tls: 'true'
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.middlewares: traefik-redirectscheme@kubernetescrd
    traefik.frontend.passHostHeader: 'true'
spec:
  ingressClassName: traefik
  tls:
    - hosts:
        - home.sipwork.pro
      secretName: sipwork.pro-tls
  rules:
    - host: home.sipwork.pro
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: homeassistant
                port:
                  name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-custom-config
  namespace: sipwork
data:
  mosquitto.conf: |
    log_dest stdout
    log_type error
    log_type warning
    log_type notice
    log_type information
    log_timestamp_format %Y-%m-%d %H:%M:%S
    allow_anonymous true

    listener 1883
    protocol mqtt

    listener 1884
    protocol websockets

    persistence true
    persistence_file mosquitto.db
    persistence_location /mosquitto/data/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mosquitto
  name: mosquitto
  namespace: sipwork
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mosquitto
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: mosquitto
    spec:
      containers:
        - image: eclipse-mosquitto:2.0.18 # {"$imagepolicy": "sipwork:mosquitto"}
          name: mosquitto
          ports:
            - containerPort: 1883
            - containerPort: 1884
          resources: {}
          volumeMounts:
            - mountPath: /mosquitto/config
              name: mosquitto-config
            - mountPath: /mosquitto/config/mosquitto.conf
              name: mosquitto-custom-config
              subPath: mosquitto.conf
      restartPolicy: Always
      volumes:
        - name: mosquitto-config
          persistentVolumeClaim:
            claimName: mosquitto-config
        - name: mosquitto-custom-config
          configMap:
            name: mosquitto-custom-config
---
apiVersion: v1
kind: Service
metadata:
  name: mosquitto
  namespace: sipwork
spec:
  type: ClusterIP
  ports:
    - port: 1883
      targetPort: 1883
      name: mqtt
      protocol: TCP
    - port: 1884
      targetPort: 1884
      name: websocket
      protocol: TCP
  selector:
    io.kompose.service: mosquitto
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: zigbee2mqtt
  name: zigbee2mqtt
  namespace: sipwork
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: zigbee2mqtt
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: zigbee2mqtt
    spec:
      containers:
        - env:
            - name: TZ
              value: Europe/Madrid
          image: koenkk/zigbee2mqtt:1.38.0 # {"$imagepolicy": "sipwork:zigbee2mqtt"}
          name: zigbee2mqtt
          ports:
            - containerPort: 8080
          resources: {}
          volumeMounts:
            - mountPath: /app/data
              name: zigbee2mqtt-data
      restartPolicy: Always
      volumes:
        - name: zigbee2mqtt-data
          persistentVolumeClaim:
            claimName: zigbee2mqtt-data
---
apiVersion: v1
kind: Service
metadata:
  name: zigbee2mqtt
  namespace: sipwork
  annotations:
    metallb.universe.tf/address-pool: internal-pool
    metallb.universe.tf/loadBalancerIPs: 192.168.4.247
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8080
      name: http
      protocol: TCP
  selector:
    io.kompose.service: zigbee2mqtt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: motioneye
  name: motioneye
  namespace: sipwork
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: motioneye
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: motioneye
    spec:
      containers:
        - env:
            - name: TIMEZONE
              value: Europe/Madrid
          # https://github.com/motioneye-project/motioneye/issues/2924
          image: ghcr.io/motioneye-project/motioneye:edge
          name: motioneye
          ports:
            - containerPort: 8765
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/motioneye
              name: motioneye-data
            - mountPath: /etc/motioneye
              name: motioneye-conf
      restartPolicy: Always
      volumes:
        - name: motioneye-data
          persistentVolumeClaim:
            claimName: motioneye-data
        - name: motioneye-conf
          persistentVolumeClaim:
            claimName: motioneye-conf
---
apiVersion: v1
kind: Service
metadata:
  name: motioneye
  namespace: sipwork
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8765
      name: http
      protocol: TCP
  selector:
    io.kompose.service: motioneye
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: motioneye
  namespace: sipwork
spec:
  stripPrefix:
    prefixes:
      - /motioneye
    forceSlash: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: node-red
  name: node-red
  namespace: sipwork
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: node-red
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: node-red
    spec:
      initContainers:
        - name: data-ownership
          image: busybox:1.28
          command: [chown, -R, '1000:1000', /data]
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: node-red-data
      containers:
        - env:
            - name: TZ
              value: Europe/Madrid
          image: nodered/node-red:3.1.10-debian # {"$imagepolicy": "sipwork:node-red"}
          name: node-red
          ports:
            - containerPort: 1880
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: node-red-data
      restartPolicy: Always
      volumes:
        - name: node-red-data
          persistentVolumeClaim:
            claimName: node-red-data
---
apiVersion: v1
kind: Service
metadata:
  name: node-red
  namespace: sipwork
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 1880
      name: http
      protocol: TCP
  selector:
    io.kompose.service: node-red
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: node-red
  namespace: sipwork
spec:
  stripPrefix:
    prefixes:
      - /node-red
    forceSlash: true
